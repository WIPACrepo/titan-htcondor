#!/bin/bash
set -o errexit
set -o nounset
set -o xtrace
pool=$(readlink -f $1)
driver_script=$(readlink -f $2)
libexec=$(readlink -f $3)
condor_container=$(readlink -f $4)

set +o nounset
if [ -z "$PBS_NUM_NODES" ]; then
	PBS_NUM_NODES=0
fi
set -o nounset

module load singularity

mkdir -p $pool
cd $pool # o/w aprun may fail
test -f $pool/pool_is_ready && rm $pool/pool_is_ready
test -f $pool/pool_kill && rm $pool/pool_kill
test -f $pool/pool_nodes && rm $pool/pool_nodes

if ((PBS_NUM_NODES == 0)); then
	singularity exec --pid $condor_container \
				$libexec/init-cm-node.sh $pool STARTD &
elif ((PBS_NUM_NODES == 1)); then
	singularity exec --pid $condor_container \
				$libexec/init-cm-node.sh $pool &
	aprun -D 1 singularity exec --pid $condor_container \
				$libexec/init-worker-node.sh $pool &
else
	aprun -D 1 -n 1 -d 16 \
			singularity exec --pid $condor_container \
					$libexec/init-cm-node.sh $pool &
	# Split up workers into multiple aprun "applications", to prevent the entire
	# pool from being killed if there is a problem with a worker (e.g. running out
	# of memory). Note that only 50 concurrent apruns are allowed, and one of them
	# is used for the central manager, so we can create up to 49 aprun "apps".
	if ((PBS_NUM_NODES <= 49)); then
		for ((i=1;i<=PBS_NUM_NODES;i++)); do
			aprun -D 1 -n 1 -d 16 \
					singularity exec --pid $condor_container \
							$libexec/init-worker-node.sh $pool &
		done
	else
		jobs_per_aprun_quotient=$(((PBS_NUM_NODES - 1)/48))
		jobs_per_aprun_remainder=$(((PBS_NUM_NODES - 1)%48))
		for ((i=1;i<=48;i++)); do
			aprun -D 1 -n $jobs_per_aprun_quotient -d 16 \
					singularity exec --pid $condor_container \
							$libexec/init-worker-node.sh $pool &
		done
		aprun -D 1 -n $jobs_per_aprun_remainder -d 16 \
					singularity exec --pid $condor_container \
							$libexec/init-worker-node.sh $pool &
fi

date >> $pool/main
env >> $pool/main
apstat -ar >> $pool/main

while ! test -f "$pool/pool_is_ready"; do
	echo Main script waiting for $pool/pool_is_ready
	sleep 5
done

ssh -p 2222 $(<$pool/cm_addr) $driver_script
ssh -p 2222 $(<$pool/cm_addr) $libexec/pool-shutdown-agent.sh $pool &

while ! test -f "$pool/pool_kill"; do
	sleep 20
done

# vim:ft=sh
